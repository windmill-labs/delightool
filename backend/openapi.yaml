openapi: "3.0.3"

info:
  version: 0.9.0
  title: Delightool server API
  contact:
    name: Delightool contact
    email: contact@delightool.dev
    url: https://delightool.dev

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

externalDocs:
  description: documentation portal
  url: https://docs.delightool.dev

servers:
  - url: /api

security:
  - bearerAuth: []
  - cookieAuth: []

paths:
  /version:
    get:
      summary: get backend version
      operationId: backendVersion
      tags:
        - settings
      responses:
        "200":
          description: git version of backend
          content:
            text/plain:
              schema:
                type: string

  /openapi.yaml:
    get:
      summary: get openapi yaml spec
      operationId: getOpenApiYaml
      tags:
        - settings
      responses:
        "200":
          description: openapi yaml file content
          content:
            text/plain:
              schema:
                type: string

  /audit/get/{id}:
    get:
      summary: get audit log (requires admin privilege)
      operationId: getAuditLog
      tags:
        - audit
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: an audit log
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLog"

  /audit/list:
    get:
      summary: list audit logs (requires admin privilege)
      operationId: listAuditLogs
      tags:
        - audit
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Before"
        - $ref: "#/components/parameters/After"
        - $ref: "#/components/parameters/Username"
        - $ref: "#/components/parameters/Operation"
        - $ref: "#/components/parameters/Resource"
        - $ref: "#/components/parameters/ActionKind"

      responses:
        "200":
          description: a list of audit logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuditLog"

  /pipenv/get/{id}:
    get:
      summary: get pipenv
      operationId: getPipenv
      tags:
        - pipenv
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: a pipenv
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipenv"

  /pipenv/getlast:
    get:
      summary: get last pipenv
      operationId: getLastPipenv
      tags:
        - pipenv
      responses:
        "200":
          description: a pipenv
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipenv"

  /pipenv/getprelude:
    get:
      summary: get pipenv prelude
      operationId: getPrelude
      tags:
        - pipenv
      responses:
        "200":
          description: a prelude
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipenvPrelude"

  /pipenv/list:
    get:
      summary: list pipenvs
      operationId: listPipenvs
      tags:
        - pipenv
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
      responses:
        "200":
          description: a list of audit logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pipenv"

  /pipenv/add:
    post:
      summary: add pipenv
      operationId: createPipenv
      tags:
        - pipenv
        - admin
      requestBody:
        description: add pipenv
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPipenv"
      responses:
        "201":
          description: pipenv added
          content:
            text/plain:
              schema:
                type: string

  /users/login:
    post:
      security: []
      summary: login with password
      operationId: login
      tags:
        - user
      requestBody:
        description: Partially filled script
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"

      responses:
        "200":
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `token` and as plaintext response.
            Preferred method of authorization is through the bearer token. The cookie is only for browser convenience.

          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=abcde12345; Path=/; HttpOnly
          content:
            text/plain:
              schema:
                type: string

  /users/create:
    post:
      summary: create user (require admin privilege)
      operationId: createUser
      tags:
        - user
        - admin
      requestBody:
        description: new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: user created
          content:
            text/plain:
              schema:
                type: string

  /users/update/{username}:
    post:
      summary: update user (require admin privilege)
      operationId: updateUser
      tags:
        - user
        - admin
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditUser"
      responses:
        "200":
          description: edited user
          content:
            text/plain:
              schema:
                type: string

  /users/setpassword:
    post:
      summary: set password
      operationId: setPassword
      tags:
        - user
      requestBody:
        description: set password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        "200":
          description: password set
          content:
            text/plain:
              schema:
                type: string

  /users/delete/{username}:
    delete:
      summary: delete user (require admin privilege)
      operationId: deleteUser
      tags:
        - user
        - admin
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: delete user
          content:
            text/plain:
              schema:
                type: string

  /users/logout:
    post:
      summary: logout
      operationId: logout
      tags:
        - user
      responses:
        "200":
          description: logout
          content:
            text/plain:
              schema:
                type: string

  /users/whoami:
    get:
      summary: whoami
      operationId: whoami
      tags:
        - user
      responses:
        "200":
          description: user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/whois/{username}:
    get:
      summary: whois
      operationId: whois
      tags:
        - user
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/list:
    get:
      summary: list users
      operationId: listUsers
      tags:
        - user
      responses:
        "200":
          description: user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/listusernames:
    get:
      summary: list usernames
      operationId: listUsernames
      tags:
        - user
      responses:
        "200":
          description: user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /users/tokens/create:
    post:
      summary: create token
      operationId: createToken
      tags:
        - user
      requestBody:
        description: new token
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewToken"
      responses:
        "201":
          description: token created
          content:
            text/plain:
              schema:
                type: string

  /users/tokens/delete/{token_prefix}:
    delete:
      summary: delete token
      operationId: deleteToken
      tags:
        - user
      parameters:
        - name: token_prefix
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: delete token
          content:
            text/plain:
              schema:
                type: string

  /users/tokens/list:
    get:
      summary: list token
      operationId: listTokens
      tags:
        - user
      responses:
        "200":
          description: truncated token
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TruncatedToken"

  /variables/create:
    post:
      summary: create variable
      operationId: createVariable
      tags:
        - variable
      requestBody:
        description: new variable
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVariable"
      responses:
        "201":
          description: variable created
          content:
            text/plain:
              schema:
                type: string

  /variables/delete/{path}:
    delete:
      summary: delete variable
      operationId: deleteVariable
      tags:
        - variable
      parameters:
        - $ref: "#/components/parameters/Path"
      responses:
        "200":
          description: variable deleted
          content:
            text/plain:
              schema:
                type: string

  /variables/update/{path}:
    post:
      summary: update variable
      operationId: updateVariable
      tags:
        - variable
      parameters:
        - $ref: "#/components/parameters/Path"
      requestBody:
        description: updated variable
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditVariable"
      responses:
        "200":
          description: variable updated
          content:
            text/plain:
              schema:
                type: string

  /variables/get/{path}:
    get:
      summary: get variable
      operationId: getVariable
      tags:
        - variable
      parameters:
        - $ref: "#/components/parameters/Path"
      responses:
        "200":
          description: variable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListableVariable"

  /variables/list:
    get:
      summary: list variables
      operationId: listVariable
      tags:
        - variable
      responses:
        "200":
          description: variable list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ListableVariable"

  /variables/list_reserved:
    get:
      summary: list reserved variables
      operationId: listReservedVariables
      tags:
        - variable
      responses:
        "200":
          description: reserved variable list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReservedVariable"

  /resources/create:
    post:
      summary: create resource
      operationId: createResource
      tags:
        - resource
      requestBody:
        description: new resource
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateResource"
      responses:
        "201":
          description: resource created
          content:
            text/plain:
              schema:
                type: string

  /resources/delete/{path}:
    delete:
      summary: delete resource
      operationId: deleteResource
      tags:
        - resource
      parameters:
        - $ref: "#/components/parameters/Path"
      responses:
        "200":
          description: resource deleted
          content:
            text/plain:
              schema:
                type: string

  /resources/update/{path}:
    post:
      summary: update resource
      operationId: updateResource
      tags:
        - resource
      parameters:
        - $ref: "#/components/parameters/Path"
      requestBody:
        description: updated resource
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditResource"
      responses:
        "200":
          description: resource updated
          content:
            text/plain:
              schema:
                type: string

  /resources/get/{path}:
    get:
      summary: get resource
      operationId: getResource
      tags:
        - resource
      parameters:
        - $ref: "#/components/parameters/Path"
      responses:
        "200":
          description: resource deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"

  /resources/list:
    get:
      summary: list resources
      operationId: listResource
      tags:
        - resource
      responses:
        "200":
          description: resource list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource"

  /resources/type/create:
    post:
      summary: create resource_type
      operationId: createResourceType
      tags:
        - resource
      requestBody:
        description: new resource_type
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceType"
      responses:
        "201":
          description: resource_type created
          content:
            text/plain:
              schema:
                type: string

  /resources/type/delete/{path}:
    delete:
      summary: delete resource_type
      operationId: deleteResourceType
      tags:
        - resource
      parameters:
        - $ref: "#/components/parameters/Path"
      responses:
        "200":
          description: resource_type deleted
          content:
            text/plain:
              schema:
                type: string

  /resources/type/update/{path}:
    post:
      summary: update resource_type
      operationId: updateResourceType
      tags:
        - resource
      parameters:
        - $ref: "#/components/parameters/Path"
      requestBody:
        description: updated resource_type
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditResourceType"
      responses:
        "200":
          description: resource_type updated
          content:
            text/plain:
              schema:
                type: string

  /resources/type/get/{path}:
    get:
      summary: get resource_type
      operationId: getResourceType
      tags:
        - resource
      parameters:
        - $ref: "#/components/parameters/Path"
      responses:
        "200":
          description: resource_type deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceType"

  /resources/type/list:
    get:
      summary: list resource_types
      operationId: listResourceType
      tags:
        - resource
      responses:
        "200":
          description: resource_type list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceType"

  /scripts/list:
    get:
      summary: list all available scripts
      operationId: listScripts
      tags:
        - script
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/OrderDesc"
        - $ref: "#/components/parameters/CreatedBy"
        - name: path_start
          description: mask to filter matching starting parh
          in: query
          schema:
            type: string
        - name: path_exact
          description: mask to filter exact matching path
          in: query
          schema:
            type: string
        - name: first_parent_hash
          description: mask to filter scripts whom first direct parent has exact hash
          in: query
          schema:
            type: string
        - name: last_parent_hash
          description: |
            mask to filter scripts whom last parent in the chain has exact hash. 
            Beware that each script stores only a limited number of parents. Hence
            the last parent hash for a script is not necessarily its top-most parent.
            To find the top-most parent you will have to jump from last to last hash
             until finding the parent
          in: query
          schema:
            type: string
        - name: parent_hash
          description: |
            is the hash present in the array of stored parent hashes for this script.
            The same warning applies than for last_parent_hash. A script only store a
            limited number of direct parent
          in: query
          schema:
            type: string
        - name: show_archived
          description: |
            (default false)
            show also the archived files.
            when multiple archived hash share the same path, only the ones with the latest create_at
            are displayed.
          in: query
          schema:
            type: boolean
        - name: is_template
          description: |
            (default regardless)
            if true show only the templates
            if false show only the non templates
            if not defined, show all regardless of if the script is a template
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: All available scripts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Script"

  /scripts/create:
    post:
      summary: create script
      operationId: createScript
      tags:
        - script
      requestBody:
        description: Partially filled script
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                parent_hash:
                  type: string
                summary:
                  type: string
                description:
                  type: string
                content:
                  type: string
                schema:
                  type: object
                is_template:
                  type: boolean
              required:
                - path
                - summary
                - description
                - content
      responses:
        "201":
          description: script created
          content:
            text/plain:
              schema:
                type: string

  /scripts/tojsonschema:
    post:
      summary: inspect code to infer jsonschema of arguments
      operationId: toJsonschema
      tags:
        - script
      requestBody:
        description: code with the main function
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: parsed args
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MainArgSignature"

  /scripts/archive/p/{path}:
    post:
      summary: archive script by path
      operationId: archiveScriptByPath
      tags:
        - script
      parameters:
        - $ref: "#/components/parameters/ScriptPath"
      responses:
        "200":
          description: script archived
          content:
            text/plain:
              schema:
                type: string

  /scripts/archive/h/{hash}:
    post:
      summary: archive script by hash
      operationId: archiveScriptByHash
      tags:
        - script
      parameters:
        - $ref: "#/components/parameters/ScriptHash"
      responses:
        "200":
          description: script details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Script"

  /scripts/delete/h/{hash}:
    post:
      summary: delete script by hash (erase content but keep hash)
      operationId: deleteScriptByHash
      tags:
        - script
      parameters:
        - $ref: "#/components/parameters/ScriptHash"
      responses:
        "200":
          description: script details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Script"

  /scripts/get/p/{path}:
    get:
      summary: get script by path
      operationId: getScriptByPath
      tags:
        - script
      parameters:
        - $ref: "#/components/parameters/ScriptPath"
      responses:
        "200":
          description: script details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Script"

  /scripts/get/h/{hash}:
    get:
      summary: get script by hash
      operationId: getScriptByHash
      tags:
        - script
      parameters:
        - $ref: "#/components/parameters/ScriptHash"
      responses:
        "200":
          description: script details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Script"

  /jobs/run/p/{path}:
    post:
      summary: run script by path
      operationId: runScriptByPath
      tags:
        - job
      parameters:
        - $ref: "#/components/parameters/ScriptPath"
        - name: scheduled_for
          description: when to schedule this job (leave empty for immediate run)
          in: query
          schema:
            type: string
            format: date-time
        - name: scheduled_in_secs
          description: schedule the script to execute in the number of seconds starting now
          in: query
          schema:
            type: number
            format: int64
        - $ref: "#/components/parameters/ParentJob"

      requestBody:
        description: script args
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScriptArgs"

      responses:
        "201":
          description: job created
          content:
            text/plain:
              schema:
                type: string
                format: uuid

  /jobs/run/h/{hash}:
    post:
      summary: run script by hash
      operationId: runScriptByHash
      tags:
        - job
      parameters:
        - $ref: "#/components/parameters/ScriptHash"
        - name: scheduled_for
          description: when to schedule this job (leave empty for immediate run)
          in: query
          schema:
            type: string
            format: date-time
        - name: scheduled_in_secs
          description: schedule the script to execute in the number of seconds starting now
          in: query
          schema:
            type: number
            format: int64
        - $ref: "#/components/parameters/ParentJob"

      requestBody:
        description: Partially filled args
        required: true
        content:
          application/json:
            schema:
              type: object

      responses:
        "201":
          description: job created
          content:
            text/plain:
              schema:
                type: string
                format: uuid

  /jobs/run/preview:
    post:
      summary: run script preview
      operationId: runScriptPreview
      tags:
        - job
      parameters:
        - name: scheduled_for
          description: when to schedule this job (leave empty for immediate run)
          in: query
          schema:
            type: string
            format: date-time
        - name: scheduled_in_secs
          description: schedule the script to execute in the number of seconds starting now
          in: query
          schema:
            type: number
            format: int64
      requestBody:
        description: previw
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Preview"

      responses:
        "201":
          description: job created
          content:
            text/plain:
              schema:
                type: string
                format: uuid

  /jobs/queue/list:
    get:
      summary: list all available queued jobs
      operationId: listQueue
      tags:
        - job
      parameters:
        - $ref: "#/components/parameters/OrderDesc"
        - $ref: "#/components/parameters/CreatedBy"
        - $ref: "#/components/parameters/ParentJob"
        - $ref: "#/components/parameters/ScriptExactPath"
        - $ref: "#/components/parameters/ScriptStartPath"
        - $ref: "#/components/parameters/ScriptExactHash"
        - $ref: "#/components/parameters/CreatedBefore"
        - $ref: "#/components/parameters/CreatedAfter"
        - $ref: "#/components/parameters/Success"
        - $ref: "#/components/parameters/JobKinds"

      responses:
        "200":
          description: All available queued jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QueuedJob"

  /jobs/completed/list:
    get:
      summary: list all available completed jobs
      operationId: listCompletedJobs
      tags:
        - job
      parameters:
        - $ref: "#/components/parameters/OrderDesc"
        - $ref: "#/components/parameters/CreatedBy"
        - $ref: "#/components/parameters/ParentJob"
        - $ref: "#/components/parameters/ScriptExactPath"
        - $ref: "#/components/parameters/ScriptStartPath"
        - $ref: "#/components/parameters/ScriptExactHash"
        - $ref: "#/components/parameters/CreatedBefore"
        - $ref: "#/components/parameters/CreatedAfter"
        - $ref: "#/components/parameters/Success"
        - $ref: "#/components/parameters/JobKinds"

      responses:
        "200":
          description: All available completed jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompletedJob"

  /jobs/list:
    get:
      summary: list all available jobs
      operationId: listJobs
      tags:
        - job
      parameters:
        - $ref: "#/components/parameters/CreatedBy"
        - $ref: "#/components/parameters/ParentJob"
        - $ref: "#/components/parameters/ScriptExactPath"
        - $ref: "#/components/parameters/ScriptStartPath"
        - $ref: "#/components/parameters/ScriptExactHash"
        - $ref: "#/components/parameters/CreatedBefore"
        - $ref: "#/components/parameters/CreatedAfter"
        - $ref: "#/components/parameters/JobKinds"

        - name: success
          description: filter on successful jobs
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: All jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Job"

  /jobs/get/{id}:
    get:
      summary: get job
      operationId: getJob
      tags:
        - job
      parameters:
        - $ref: "#/components/parameters/JobId"
      responses:
        "200":
          description: job details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"

  /jobs/getupdate/{id}:
    get:
      summary: get job updates
      operationId: getJobUpdates
      tags:
        - job
      parameters:
        - $ref: "#/components/parameters/JobId"
        - name: running
          in: query
          schema:
            type: boolean
        - name: log_offset
          in: query
          schema:
            type: number
            format: i32

      responses:
        "200":
          description: job details
          content:
            application/json:
              schema:
                type: object
                properties:
                  running:
                    type: boolean
                  completed:
                    type: boolean
                  new_logs:
                    type: string

  /jobs/completed/get/{id}:
    get:
      summary: get completed job
      operationId: getCompletedJob
      tags:
        - job
      parameters:
        - $ref: "#/components/parameters/JobId"
      responses:
        "200":
          description: job details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompletedJob"

  /jobs/completed/delete/{id}:
    post:
      summary: delete completed job (erase content but keep run id)
      operationId: deleteCompletedJob
      tags:
        - job
      parameters:
        - $ref: "#/components/parameters/JobId"
      responses:
        "200":
          description: job details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompletedJob"

  /jobs/queue/cancel/{id}:
    post:
      summary: cancel queued job
      operationId: cancelQueuedJob
      tags:
        - job
      parameters:
        - $ref: "#/components/parameters/JobId"
      requestBody:
        description: reason
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string

      responses:
        "200":
          description: job canceled
          content:
            text/plain:
              schema:
                type: string

  /schedules/preview:
    post:
      summary: preview schedule
      operationId: previewSchedule
      tags:
        - schedule
      requestBody:
        description: schedule
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                schedule:
                  type: string
      responses:
        "200":
          description: the preview of the next 10 time this schedule would apply to
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: date-time

  /schedules/create:
    post:
      summary: create schedule
      operationId: createSchedule
      tags:
        - schedule
      requestBody:
        description: new schedule
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSchedule"
      responses:
        "201":
          description: schedule created
          content:
            text/plain:
              schema:
                type: string

  /schedules/update/{path}:
    post:
      summary: update schedule
      operationId: updateSchedule
      tags:
        - schedule
      parameters:
        - $ref: "#/components/parameters/Path"
      requestBody:
        description: updated schedule
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditSchedule"
      responses:
        "200":
          description: schedule updated
          content:
            text/plain:
              schema:
                type: string

  /schedules/setenabled/{path}:
    post:
      summary: set enabled schedule
      operationId: setScheduleEnabled
      tags:
        - schedule
      parameters:
        - $ref: "#/components/parameters/Path"
      requestBody:
        description: updated schedule enable
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
              required:
                - enabled

      responses:
        "200":
          description: schedule enabled set
          content:
            text/plain:
              schema:
                type: string

  /schedules/get/{path}:
    get:
      summary: get schedule
      operationId: getSchedule
      tags:
        - schedule
      parameters:
        - $ref: "#/components/parameters/Path"
      responses:
        "200":
          description: schedule deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"

  /schedules/list:
    get:
      summary: list schedules
      operationId: listSchedules
      tags:
        - schedule
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
      responses:
        "200":
          description: schedule list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schedule"

  /groups/list:
    get:
      summary: list groups
      operationId: listGroups
      tags:
        - group
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
      responses:
        "200":
          description: group list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"

  /groups/listnames:
    get:
      summary: list group names
      operationId: listGroupNames
      tags:
        - group
      responses:
        "200":
          description: group list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /groups/create:
    post:
      summary: create group
      operationId: createGroup
      tags:
        - group
      requestBody:
        description: create group
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        "200":
          description: group created
          content:
            text/plain:
              schema:
                type: string

  /groups/update/{name}:
    post:
      summary: update group
      operationId: updateGroup
      tags:
        - group
      parameters:
        - $ref: "#/components/parameters/Name"
      requestBody:
        description: updated group
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                summary:
                  type: string
      responses:
        "200":
          description: group updated
          content:
            text/plain:
              schema:
                type: string

  /groups/delete/{name}:
    delete:
      summary: delete group
      operationId: deleteGroup
      tags:
        - group
      parameters:
        - $ref: "#/components/parameters/Name"
      responses:
        "200":
          description: group deleted
          content:
            text/plain:
              schema:
                type: string

  /groups/get/{name}:
    get:
      summary: get group
      operationId: getGroup
      tags:
        - group
      parameters:
        - $ref: "#/components/parameters/Name"
      responses:
        "200":
          description: group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

  /groups/adduser/{name}:
    post:
      summary: add user to group
      operationId: addUserToGroup
      tags:
        - group
      parameters:
        - $ref: "#/components/parameters/Name"
      requestBody:
        description: added user to group
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        "200":
          description: user added to group
          content:
            text/plain:
              schema:
                type: string

  /groups/removeuser/{name}:
    post:
      summary: remove user to group
      operationId: removeUserToGroup
      tags:
        - group
      parameters:
        - $ref: "#/components/parameters/Name"
      requestBody:
        description: added user to group
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        "200":
          description: user removed from group
          content:
            text/plain:
              schema:
                type: string

  /workers/list:
    get:
      summary: list workers
      operationId: listWorkers
      tags:
        - worker
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
      responses:
        "200":
          description: a list of workers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkerPing"

  /acls/get/{kind}/{path}:
    get:
      summary: get granular acls
      operationId: getGranularAcls
      tags:
        - granular_acl
      parameters:
        - $ref: "#/components/parameters/Path"
        - name: kind
          in: path
          required: true
          schema:
            type: string
            enum: [script, group_, resource, schedule, variable]
      responses:
        "200":
          description: acls
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: boolean

  /acls/add/{kind}/{path}:
    post:
      summary: add granular acls
      operationId: addGranularAcls
      tags:
        - granular_acl
      parameters:
        - $ref: "#/components/parameters/Path"
        - name: kind
          in: path
          required: true
          schema:
            type: string
            enum: [script, group_, resource, schedule, variable]
      requestBody:
        description: acl to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  type: string
                write:
                  type: boolean
              required: [owner]
      responses:
        "200":
          description: granular acl added
          content:
            text/plain:
              schema:
                type: string

  /acls/remove/{kind}/{path}:
    post:
      summary: remove granular acls
      operationId: removeGranularAcls
      tags:
        - granular_acl
      parameters:
        - $ref: "#/components/parameters/Path"
        - name: kind
          in: path
          required: true
          schema:
            type: string
            enum: [script, group_, resource, schedule, variable]
      requestBody:
        description: acl to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  type: string
              required: [owner]
      responses:
        "200":
          description: granular acl removed
          content:
            text/plain:
              schema:
                type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
  parameters:
    ScriptPath:
      name: path
      in: path
      required: true
      schema:
        type: string
    ScriptHash:
      name: hash
      in: path
      required: true
      schema:
        type: string
    JobId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    Path:
      name: path
      in: path
      required: true
      schema:
        type: string
    IdPath:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int32
    Name:
      name: name
      in: path
      required: true
      schema:
        type: string
    Page:
      name: page
      description: which page to return (start at 1, default 1)
      in: query
      schema:
        type: integer
        format: int32
    PerPage:
      name: per_page
      description: number of items to return for a given page (default 30, max 100)
      in: query
      schema:
        type: integer
        format: int32
    OrderDesc:
      name: order_desc
      description: order by desc order (default true)
      in: query
      schema:
        type: boolean
    CreatedBy:
      name: created_by
      description: mask to filter exact matching user creator
      in: query
      schema:
        type: string
    ParentJob:
      name: parent_job
      description: The parent job that is at the origin and responsible for the execution of this script if any
      in: query
      schema:
        type: string
        format: uuid
    ScriptStartPath:
      name: script_path_start
      description: mask to filter matching starting path
      in: query
      schema:
        type: string
    ScriptExactPath:
      name: script_path_exact
      description: mask to filter exact matching path
      in: query
      schema:
        type: string
    ScriptExactHash:
      name: script_hash
      description: mask to filter exact matching path
      in: query
      schema:
        type: string
    CreatedBefore:
      name: created_before
      description: filter on created before (inclusive) timestamp
      in: query
      schema:
        type: string
        format: date-time
    CreatedAfter:
      name: created_after
      description: filter on created after (exclusive) timestamp
      in: query
      schema:
        type: string
        format: date-time
    Success:
      name: success
      description: filter on successful jobs
      in: query
      schema:
        type: boolean
    After:
      name: after
      description: filter on created after (exclusive) timestamp
      in: query
      schema:
        type: string
        format: date-time
    Before:
      name: before
      description: filter on created before (exclusive) timestamp
      in: query
      schema:
        type: string
        format: date-time
    Username:
      name: username
      description: filter on exact username of user
      in: query
      schema:
        type: string
    Operation:
      name: operation
      description: filter on exact or prefix name of operation
      in: query
      schema:
        type: string
    Resource:
      name: resource
      description: filter on exact or prefix name of resource
      in: query
      schema:
        type: string
    ActionKind:
      name: action_kind
      description: filter on type of operation
      in: query
      schema:
        type: string
        enum: [Create, Update, Delete, Execute]
    JobKinds:
      name: job_kinds
      description: filter on job kind (values 'preview', 'script', 'dependencies') separated by,
      in: query
      schema:
        type: string
      # correct type is below but explode not supported by our codegen
      #   type: array
      #   items:
      #     type: string
      #     enum: ["preview", "script", "dependencies"]
      # explode: false

  schemas:
    Script:
      type: object
      properties:
        hash:
          type: string
        path:
          type: string
        parent_hashes:
          type: array
          description: |
            The first element is the direct parent of the script, the second is the parent of the first, etc
          items:
            type: string
        summary:
          type: string
        description:
          type: string
        content:
          type: string
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        archived:
          type: boolean
        schema:
          type: object
        deleted:
          type: boolean
        is_template:
          type: boolean
        extra_perms:
          type: object
          additionalProperties:
            type: boolean
      required:
        - hash
        - path
        - summary
        - content
        - created_by
        - created_at
        - archived
        - deleted
        - is_template
        - extra_perms

    ScriptArgs:
      type: object
      additionalProperties: true

    QueuedJob:
      type: object
      properties:
        id:
          type: string
          format: uuid
        parent_job:
          type: string
          format: uuid
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        scheduled_for:
          type: string
          format: date-time
        running:
          type: boolean
        script_path:
          type: string
        script_hash:
          type: string
        args:
          $ref: "#/components/schemas/ScriptArgs"
        logs:
          type: string
        raw_code:
          type: string
        canceled:
          type: boolean
        canceled_by:
          type: string
        canceled_reason:
          type: string
        scheduled:
          type: boolean
        last_ping:
          type: string
          format: date-time
        job_kind:
          type: string
          enum: ["script", "preview", "dependencies"]
        env_id:
          type: number
          format: int32
        schedule_path:
          type: string
        permissioned_as:
          type: string
          description: |
            The user (u/userfoo) or group (g/groupfoo) whom 
            the execution of this script will be permissioned_as and by extension its DT_TOKEN.
      required:
        - id
        - running
        - canceled
        - scheduled
        - job_kind
        - permissioned_as

    CompletedJob:
      type: object
      properties:
        id:
          type: string
          format: uuid
        parent_job:
          type: string
          format: uuid
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        duration:
          type: integer
        success:
          type: boolean
        script_path:
          type: string
        script_hash:
          type: string
        args:
          $ref: "#/components/schemas/ScriptArgs"
        result:
          type: object
        logs:
          type: string
        deleted:
          type: boolean
        raw_code:
          type: string
        canceled:
          type: boolean
        canceled_by:
          type: string
        canceled_reason:
          type: string
        scheduled:
          type: boolean
        job_kind:
          type: string
          enum: ["script", "preview", "dependencies"]
        env_id:
          type: number
          format: int32
        schedule_path:
          type: string
        permissioned_as:
          type: string
          description: |
            The user (u/userfoo) or group (g/groupfoo) whom 
            the execution of this script will be permissioned_as and by extension its DT_TOKEN.
      required:
        - id
        - success
        - canceled
        - scheduled
        - job_kind
        - env_id
        - permissioned_as

    Job:
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/CompletedJob"
            - $ref: "#/components/schemas/QueuedJob"
        - type: object
          properties:
            type:
              type: string
              enum: [CompletedJob, QueuedJob]
      discriminator:
        propertyName: type

    User:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        is_admin:
          type: boolean
        created_at:
          type: string
          format: date-time
        last_accessed_at:
          type: string
          format: date-time
        groups:
          type: array
          items:
            type: string
      required:
        - email
        - username
        - is_admin
        - created_at
        - last_accessed_at

    Login:
      type: object
      properties:
        email_or_username:
          type: string
        password:
          type: string
      required:
        - email_or_username
        - password

    NewUser:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
        is_admin:
          type: boolean
      required:
        - email
        - username
        - password
        - is_admin

    EditUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        is_admin:
          type: boolean

    TruncatedToken:
      type: object
      properties:
        label:
          type: string
        expiration:
          type: string
          format: date-time
        token_prefix:
          type: string
      required:
        - token_prefix

    NewToken:
      type: object
      properties:
        label:
          type: string
        expiration:
          type: string
          format: date-time

    ListableVariable:
      type: object
      properties:
        path:
          type: string
        name:
          type: string
        value:
          type: string
        is_secret:
          type: boolean
        extra_perms:
          type: object
          additionalProperties:
            type: boolean
      required:
        - path
        - name
        - is_secret
        - extra_perms

    ReservedVariable:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        description:
          type: string
      required:
        - name
        - value
        - description

    CreateVariable:
      type: object
      properties:
        path:
          type: string
        value:
          type: string
        is_secret:
          type: boolean
      required:
        - path
        - value
        - is_secret

    EditVariable:
      type: object
      properties:
        path:
          type: string
        value:
          type: string
        is_secret:
          type: boolean

    AuditLog:
      type: object
      properties:
        id:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
        username:
          type: string
        operation:
          type: string
          enum:
            - "jobs.run"
            - "scripts.create"
            - "scripts.update"
            - "users.create"
            - "users.delete"
            - "users.setpassword"
            - "users.update"
            - "users.login"
            - "users.token.create"
            - "users.token.delete"
            - "variables.create"
            - "variables.delete"
            - "variables.update"
        action_kind:
          type: string
          enum: ["Created", "Updated", "Delete", "Execute"]
        resource:
          type: string
        parameters:
          type: object
      required:
        - id
        - timestamp
        - username
        - operation
        - action_kind

    MainArgSignature:
      type: object
      properties:
        star_args:
          type: boolean
        star_kwargs:
          type: boolean
        args:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              typ:
                type: string
                enum: ["str", "float", "int", "bool", "unknown"]
              has_default:
                type: boolean
              default: {}
            required:
              - name
              - typ
      required:
        - star_args
        - start_kwargs
        - args

    Preview:
      type: object
      properties:
        content:
          type: string
        path:
          type: string
        args:
          $ref: "#/components/schemas/ScriptArgs"

      required:
        - content
        - args

    CreateResource:
      type: object
      properties:
        path:
          type: string
        value:
          type: object
        description:
          type: string
        resource_type:
          type: string
      required:
        - path
        - value
        - resource_type

    EditResource:
      type: object
      properties:
        path:
          type: string
        description:
          type: string
        value:
          type: object

    Resource:
      type: object
      properties:
        path:
          type: string
        description:
          type: string
        resource_type:
          type: string
        value:
          type: object
        extra_perms:
          type: object
          additionalProperties:
            type: boolean
      required:
        - path
        - resource_type

    ResourceType:
      type: object
      properties:
        name:
          type: string
        schema: {}
        description:
          type: string
      required:
        - name

    EditResourceType:
      type: object
      properties:
        schema:
          type: string
        description:
          type: string

    AddPipenv:
      type: object
      properties:
        python_version:
          type: string
        dependencies:
          type: array
          items:
            type: string
      required:
        - dependencies

    Pipenv:
      type: object
      properties:
        id:
          type: number
          format: int64
        timestamp:
          type: string
          format: date-time
        created_by:
          type: string
        python_version:
          type: string
        dependencies:
          type: array
          items:
            type: string
        pipfile_lock:
          type: string
        job_id:
          type: string
          format: uuid
      required:
        - id
        - timestamp
        - created_by
        - dependencies

    PipenvPrelude:
      type: object
      properties:
        python_version:
          type: string
        dependencies:
          type: array
          items:
            type: string
      required:
        - python_version
        - dependencies

    Schedule:
      type: object
      properties:
        path:
          type: string
        edited_by:
          type: string
        edited_at:
          type: string
          format: date-time
        schedule:
          type: string
        enabled:
          type: boolean
        script_path:
          type: string
        script_hash:
          type: string
        args:
          $ref: "#/components/schemas/ScriptArgs"
        extra_perms:
          type: object
          additionalProperties:
            type: boolean
      required:
        - path
        - edited_by
        - edited_at
        - schedule
        - extra_perms

    NewSchedule:
      type: object
      properties:
        path:
          type: string
        schedule:
          type: string
        script_path:
          type: string
        script_hash:
          type: string
        args:
          $ref: "#/components/schemas/ScriptArgs"
      required:
        - path
        - schedule

    EditSchedule:
      type: object
      properties:
        schedule:
          type: string
        script_path:
          type: string
        script_hash:
          type: string
        args:
          $ref: "#/components/schemas/ScriptArgs"
      required:
        - schedule

    Group:
      type: object
      properties:
        name:
          type: string
        summary:
          type: string
        members:
          type: array
          items:
            type: string
        extra_perms:
          type: object
          additionalProperties:
            type: boolean
      required:
        - name

    WorkerPing:
      type: object
      properties:
        worker:
          type: string
        worker_instance:
          type: string
        ping_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        env_id:
          type: number
          format: int32
        ip:
          type: string
        jobs_executed:
          type: number
          format: int32
      required:
        - worker
        - worker_instance
        - ping_at
        - started_at
        - env_id
        - ip
        - jobs_executed
